// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package sqlc

import (
	"context"
)

const addEmailToNewsletter = `-- name: AddEmailToNewsletter :exec
INSERT INTO newsletter_subscribed (email)
VALUES (?)
`

func (q *Queries) AddEmailToNewsletter(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, addEmailToNewsletter, email)
	return err
}

const createUser = `-- name: CreateUser :execlastid
INSERT users (username, email, password)
VALUES (?, ?, ?)
`

type CreateUserParams struct {
	Username string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.Email, arg.Password)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id,
       username,
       email,
       avatar_id,
       password,
       permission,
       email_confirmed,
       status
FROM users
WHERE email = ?
`

type GetUserByEmailRow struct {
	ID             int64
	Username       string
	Email          string
	AvatarID       string
	Password       string
	Permission     int32
	EmailConfirmed bool
	Status         UsersStatus
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.AvatarID,
		&i.Password,
		&i.Permission,
		&i.EmailConfirmed,
		&i.Status,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id,
       username,
       email,
       avatar_id,
       permission,
       email_confirmed,
       status
FROM users
WHERE id = ?
`

type GetUserByIDRow struct {
	ID             int64
	Username       string
	Email          string
	AvatarID       string
	Permission     int32
	EmailConfirmed bool
	Status         UsersStatus
}

func (q *Queries) GetUserByID(ctx context.Context, id int64) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.AvatarID,
		&i.Permission,
		&i.EmailConfirmed,
		&i.Status,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id,
       username,
       email,
       avatar_id,
       permission,
       email_confirmed,
       status
FROM users
WHERE username = ?
`

type GetUserByUsernameRow struct {
	ID             int64
	Username       string
	Email          string
	AvatarID       string
	Permission     int32
	EmailConfirmed bool
	Status         UsersStatus
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.AvatarID,
		&i.Permission,
		&i.EmailConfirmed,
		&i.Status,
	)
	return i, err
}
