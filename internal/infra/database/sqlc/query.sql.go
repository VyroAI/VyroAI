// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const addEmailToNewsletter = `-- name: AddEmailToNewsletter :exec
INSERT INTO newsletter_subscribed (email)
VALUES (?)
`

func (q *Queries) AddEmailToNewsletter(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, addEmailToNewsletter, email)
	return err
}

const createOAuthAccount = `-- name: CreateOAuthAccount :exec
INSERT oauth_account (user_id, oauth_provider, account_id)
VALUES (?, ?, ?)
`

type CreateOAuthAccountParams struct {
	UserID        int64
	OauthProvider NullOauthAccountOauthProvider
	AccountID     string
}

func (q *Queries) CreateOAuthAccount(ctx context.Context, arg CreateOAuthAccountParams) error {
	_, err := q.db.ExecContext(ctx, createOAuthAccount, arg.UserID, arg.OauthProvider, arg.AccountID)
	return err
}

const createUser = `-- name: CreateUser :execlastid
INSERT users (username, email, password)
VALUES (?, ?, ?)
`

type CreateUserParams struct {
	Username string
	Email    string
	Password sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.Email, arg.Password)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createUserSubscription = `-- name: CreateUserSubscription :exec
INSERT user_subscriptions (user_id, api_key)
VALUES (?, ?)
`

type CreateUserSubscriptionParams struct {
	UserID int64
	ApiKey string
}

func (q *Queries) CreateUserSubscription(ctx context.Context, arg CreateUserSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, createUserSubscription, arg.UserID, arg.ApiKey)
	return err
}

const getProfileAndChats = `-- name: GetProfileAndChats :many
SELECT  username,
        email,
        avatar_id,
        permission,
        email_confirmed,
        is_banned,
        users.created_at,
        chat_bot.title,
        chat_bot.chatbot_id
FROM users LEFT JOIN
     chat_bot ON chat_bot.user_id=users.id
WHERE users.id=?
`

type GetProfileAndChatsRow struct {
	Username       string
	Email          string
	AvatarID       string
	Permission     int32
	EmailConfirmed bool
	IsBanned       bool
	CreatedAt      time.Time
	Title          sql.NullString
	ChatbotID      sql.NullInt64
}

func (q *Queries) GetProfileAndChats(ctx context.Context, id int64) ([]GetProfileAndChatsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProfileAndChats, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProfileAndChatsRow
	for rows.Next() {
		var i GetProfileAndChatsRow
		if err := rows.Scan(
			&i.Username,
			&i.Email,
			&i.AvatarID,
			&i.Permission,
			&i.EmailConfirmed,
			&i.IsBanned,
			&i.CreatedAt,
			&i.Title,
			&i.ChatbotID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id,
       username,
       email,
       avatar_id,
       password,
       permission,
       email_confirmed,
       is_banned,
       created_at
FROM users
WHERE email = ?
`

type GetUserByEmailRow struct {
	ID             int64
	Username       string
	Email          string
	AvatarID       string
	Password       sql.NullString
	Permission     int32
	EmailConfirmed bool
	IsBanned       bool
	CreatedAt      time.Time
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.AvatarID,
		&i.Password,
		&i.Permission,
		&i.EmailConfirmed,
		&i.IsBanned,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id,
       username,
       email,
       avatar_id,
       permission,
       email_confirmed,
       is_banned,
       created_at
FROM users
WHERE id = ?
`

type GetUserByIDRow struct {
	ID             int64
	Username       string
	Email          string
	AvatarID       string
	Permission     int32
	EmailConfirmed bool
	IsBanned       bool
	CreatedAt      time.Time
}

func (q *Queries) GetUserByID(ctx context.Context, id int64) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.AvatarID,
		&i.Permission,
		&i.EmailConfirmed,
		&i.IsBanned,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByOAuthID = `-- name: GetUserByOAuthID :one
SELECT users.id,
       username,
       email,
       avatar_id,
       permission,
       email_confirmed,
       is_banned,
       created_at,
       account_id
FROM users
         INNER JOIN oauth_account
                    ON oauth_account.user_id = users.id

WHERE account_id = ?
`

type GetUserByOAuthIDRow struct {
	ID             int64
	Username       string
	Email          string
	AvatarID       string
	Permission     int32
	EmailConfirmed bool
	IsBanned       bool
	CreatedAt      time.Time
	AccountID      string
}

func (q *Queries) GetUserByOAuthID(ctx context.Context, accountID string) (GetUserByOAuthIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByOAuthID, accountID)
	var i GetUserByOAuthIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.AvatarID,
		&i.Permission,
		&i.EmailConfirmed,
		&i.IsBanned,
		&i.CreatedAt,
		&i.AccountID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id,
       username,
       email,
       avatar_id,
       permission,
       email_confirmed,
       is_banned,
       created_at
FROM users
WHERE username = ?
`

type GetUserByUsernameRow struct {
	ID             int64
	Username       string
	Email          string
	AvatarID       string
	Permission     int32
	EmailConfirmed bool
	IsBanned       bool
	CreatedAt      time.Time
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.AvatarID,
		&i.Permission,
		&i.EmailConfirmed,
		&i.IsBanned,
		&i.CreatedAt,
	)
	return i, err
}
