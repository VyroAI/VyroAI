// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type OauthRegisterOauthProvider string

const (
	OauthRegisterOauthProviderAPPLE     OauthRegisterOauthProvider = "APPLE"
	OauthRegisterOauthProviderGOOGLE    OauthRegisterOauthProvider = "GOOGLE"
	OauthRegisterOauthProviderINSTAGRAM OauthRegisterOauthProvider = "INSTAGRAM"
	OauthRegisterOauthProviderDISCORD   OauthRegisterOauthProvider = "DISCORD"
)

func (e *OauthRegisterOauthProvider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OauthRegisterOauthProvider(s)
	case string:
		*e = OauthRegisterOauthProvider(s)
	default:
		return fmt.Errorf("unsupported scan type for OauthRegisterOauthProvider: %T", src)
	}
	return nil
}

type NullOauthRegisterOauthProvider struct {
	OauthRegisterOauthProvider OauthRegisterOauthProvider
	Valid                      bool // Valid is true if OauthRegisterOauthProvider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOauthRegisterOauthProvider) Scan(value interface{}) error {
	if value == nil {
		ns.OauthRegisterOauthProvider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OauthRegisterOauthProvider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOauthRegisterOauthProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OauthRegisterOauthProvider), nil
}

type ChatBot struct {
	ID             int64
	ChatbotID      int64
	UserID         int64
	Title          string
	CharacterCount int32
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
}

type NewsletterSubscribed struct {
	ID    int64
	Email string
}

type OauthRegister struct {
	ID            int64
	OauthProvider NullOauthRegisterOauthProvider
}

type Payment struct {
	ID              int64
	UserID          int64
	PlanID          int32
	Amount          string
	StripePaymentID string
	CreatedAt       sql.NullTime
}

type SubscriptionPlan struct {
	ID                 int32
	Name               string
	Description        string
	Price              string
	MessageLimit       int32
	CharacterLimit     int64
	Chatbot            int32
	MultipleFileUpload bool
	ShowBranding       bool
	ApiAccess          bool
}

type User struct {
	ID             int64
	Username       string
	Email          string
	Password       sql.NullString
	AvatarID       string
	Permission     int32
	SubscriptionID int64
	FingerprintID  sql.NullString
	OauthID        sql.NullInt64
	EmailConfirmed bool
	IsBanned       bool
	CreatedAt      time.Time
}

type UserSubscription struct {
	ID           int64
	PlanID       int32
	OpenaiApiKey sql.NullString
	ApiKey       string
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
}
