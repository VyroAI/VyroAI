// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type SubscriptionPlansName string

const (
	SubscriptionPlansNameFREE       SubscriptionPlansName = "FREE"
	SubscriptionPlansNamePRO        SubscriptionPlansName = "PRO"
	SubscriptionPlansNameENTERPRISE SubscriptionPlansName = "ENTERPRISE"
)

func (e *SubscriptionPlansName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubscriptionPlansName(s)
	case string:
		*e = SubscriptionPlansName(s)
	default:
		return fmt.Errorf("unsupported scan type for SubscriptionPlansName: %T", src)
	}
	return nil
}

type NullSubscriptionPlansName struct {
	SubscriptionPlansName SubscriptionPlansName
	Valid                 bool // Valid is true if SubscriptionPlansName is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubscriptionPlansName) Scan(value interface{}) error {
	if value == nil {
		ns.SubscriptionPlansName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubscriptionPlansName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubscriptionPlansName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubscriptionPlansName), nil
}

type UsersStatus string

const (
	UsersStatusACTIVE    UsersStatus = "ACTIVE"
	UsersStatusSUSPENDED UsersStatus = "SUSPENDED"
	UsersStatusBANNED    UsersStatus = "BANNED"
)

func (e *UsersStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersStatus(s)
	case string:
		*e = UsersStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersStatus: %T", src)
	}
	return nil
}

type NullUsersStatus struct {
	UsersStatus UsersStatus
	Valid       bool // Valid is true if UsersStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UsersStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersStatus), nil
}

type NewsletterSubscribed struct {
	ID    int64
	Email string
}

type Payment struct {
	ID              int64
	UserID          int64
	PlanID          int32
	Amount          string
	StripePaymentID string
	CreatedAt       sql.NullTime
}

type SubscriptionPlan struct {
	ID          int64
	Name        SubscriptionPlansName
	Description sql.NullString
	Price       string
	Duration    int32
}

type User struct {
	ID             int64
	Username       string
	Email          string
	Password       string
	AvatarID       string
	Permission     int32
	EmailConfirmed bool
	Status         UsersStatus
	CreatedAt      time.Time
}

type UserSubscription struct {
	ID        int64
	UserID    int64
	PlanID    int32
	StartDate time.Time
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}
